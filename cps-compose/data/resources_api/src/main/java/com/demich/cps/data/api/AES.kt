package com.demich.cps.data.api

import kotlin.math.min


fun decodeAES(raw_cipher: String): String {
    val decoded = decrypt(cipherIn = hexToBytes(raw_cipher))
    return decoded.joinToString(separator = "") { "%02x".format(it) }
}

private fun hexToBytes(hexIn: String): IntArray =
    IntArray(16) { i ->
        hexIn.substring(i*2, i*2+2).toInt(16)
    }


private class AES {

    private val sbox = intArrayOf(
        0x63, 0x7c, 0x77, 0x7b, 0xf2, 0x6b, 0x6f, 0xc5, 0x30, 0x01, 0x67,
        0x2b, 0xfe, 0xd7, 0xab, 0x76, 0xca, 0x82, 0xc9, 0x7d, 0xfa, 0x59,
        0x47, 0xf0, 0xad, 0xd4, 0xa2, 0xaf, 0x9c, 0xa4, 0x72, 0xc0, 0xb7,
        0xfd, 0x93, 0x26, 0x36, 0x3f, 0xf7, 0xcc, 0x34, 0xa5, 0xe5, 0xf1,
        0x71, 0xd8, 0x31, 0x15, 0x04, 0xc7, 0x23, 0xc3, 0x18, 0x96, 0x05,
        0x9a, 0x07, 0x12, 0x80, 0xe2, 0xeb, 0x27, 0xb2, 0x75, 0x09, 0x83,
        0x2c, 0x1a, 0x1b, 0x6e, 0x5a, 0xa0, 0x52, 0x3b, 0xd6, 0xb3, 0x29,
        0xe3, 0x2f, 0x84, 0x53, 0xd1, 0x00, 0xed, 0x20, 0xfc, 0xb1, 0x5b,
        0x6a, 0xcb, 0xbe, 0x39, 0x4a, 0x4c, 0x58, 0xcf, 0xd0, 0xef, 0xaa,
        0xfb, 0x43, 0x4d, 0x33, 0x85, 0x45, 0xf9, 0x02, 0x7f, 0x50, 0x3c,
        0x9f, 0xa8, 0x51, 0xa3, 0x40, 0x8f, 0x92, 0x9d, 0x38, 0xf5, 0xbc,
        0xb6, 0xda, 0x21, 0x10, 0xff, 0xf3, 0xd2, 0xcd, 0x0c, 0x13, 0xec,
        0x5f, 0x97, 0x44, 0x17, 0xc4, 0xa7, 0x7e, 0x3d, 0x64, 0x5d, 0x19,
        0x73, 0x60, 0x81, 0x4f, 0xdc, 0x22, 0x2a, 0x90, 0x88, 0x46, 0xee,
        0xb8, 0x14, 0xde, 0x5e, 0x0b, 0xdb, 0xe0, 0x32, 0x3a, 0x0a, 0x49,
        0x06, 0x24, 0x5c, 0xc2, 0xd3, 0xac, 0x62, 0x91, 0x95, 0xe4, 0x79,
        0xe7, 0xc8, 0x37, 0x6d, 0x8d, 0xd5, 0x4e, 0xa9, 0x6c, 0x56, 0xf4,
        0xea, 0x65, 0x7a, 0xae, 0x08, 0xba, 0x78, 0x25, 0x2e, 0x1c, 0xa6,
        0xb4, 0xc6, 0xe8, 0xdd, 0x74, 0x1f, 0x4b, 0xbd, 0x8b, 0x8a, 0x70,
        0x3e, 0xb5, 0x66, 0x48, 0x03, 0xf6, 0x0e, 0x61, 0x35, 0x57, 0xb9,
        0x86, 0xc1, 0x1d, 0x9e, 0xe1, 0xf8, 0x98, 0x11, 0x69, 0xd9, 0x8e,
        0x94, 0x9b, 0x1e, 0x87, 0xe9, 0xce, 0x55, 0x28, 0xdf, 0x8c, 0xa1,
        0x89, 0x0d, 0xbf, 0xe6, 0x42, 0x68, 0x41, 0x99, 0x2d, 0x0f, 0xb0,
        0x54, 0xbb, 0x16
    )

    private val rsbox = intArrayOf(
        0x52, 0x09, 0x6a, 0xd5, 0x30, 0x36, 0xa5, 0x38, 0xbf, 0x40, 0xa3,
        0x9e, 0x81, 0xf3, 0xd7, 0xfb, 0x7c, 0xe3, 0x39, 0x82, 0x9b, 0x2f,
        0xff, 0x87, 0x34, 0x8e, 0x43, 0x44, 0xc4, 0xde, 0xe9, 0xcb, 0x54,
        0x7b, 0x94, 0x32, 0xa6, 0xc2, 0x23, 0x3d, 0xee, 0x4c, 0x95, 0x0b,
        0x42, 0xfa, 0xc3, 0x4e, 0x08, 0x2e, 0xa1, 0x66, 0x28, 0xd9, 0x24,
        0xb2, 0x76, 0x5b, 0xa2, 0x49, 0x6d, 0x8b, 0xd1, 0x25, 0x72, 0xf8,
        0xf6, 0x64, 0x86, 0x68, 0x98, 0x16, 0xd4, 0xa4, 0x5c, 0xcc, 0x5d,
        0x65, 0xb6, 0x92, 0x6c, 0x70, 0x48, 0x50, 0xfd, 0xed, 0xb9, 0xda,
        0x5e, 0x15, 0x46, 0x57, 0xa7, 0x8d, 0x9d, 0x84, 0x90, 0xd8, 0xab,
        0x00, 0x8c, 0xbc, 0xd3, 0x0a, 0xf7, 0xe4, 0x58, 0x05, 0xb8, 0xb3,
        0x45, 0x06, 0xd0, 0x2c, 0x1e, 0x8f, 0xca, 0x3f, 0x0f, 0x02, 0xc1,
        0xaf, 0xbd, 0x03, 0x01, 0x13, 0x8a, 0x6b, 0x3a, 0x91, 0x11, 0x41,
        0x4f, 0x67, 0xdc, 0xea, 0x97, 0xf2, 0xcf, 0xce, 0xf0, 0xb4, 0xe6,
        0x73, 0x96, 0xac, 0x74, 0x22, 0xe7, 0xad, 0x35, 0x85, 0xe2, 0xf9,
        0x37, 0xe8, 0x1c, 0x75, 0xdf, 0x6e, 0x47, 0xf1, 0x1a, 0x71, 0x1d,
        0x29, 0xc5, 0x89, 0x6f, 0xb7, 0x62, 0x0e, 0xaa, 0x18, 0xbe, 0x1b,
        0xfc, 0x56, 0x3e, 0x4b, 0xc6, 0xd2, 0x79, 0x20, 0x9a, 0xdb, 0xc0,
        0xfe, 0x78, 0xcd, 0x5a, 0xf4, 0x1f, 0xdd, 0xa8, 0x33, 0x88, 0x07,
        0xc7, 0x31, 0xb1, 0x12, 0x10, 0x59, 0x27, 0x80, 0xec, 0x5f, 0x60,
        0x51, 0x7f, 0xa9, 0x19, 0xb5, 0x4a, 0x0d, 0x2d, 0xe5, 0x7a, 0x9f,
        0x93, 0xc9, 0x9c, 0xef, 0xa0, 0xe0, 0x3b, 0x4d, 0xae, 0x2a, 0xf5,
        0xb0, 0xc8, 0xeb, 0xbb, 0x3c, 0x83, 0x53, 0x99, 0x61, 0x17, 0x2b,
        0x04, 0x7e, 0xba, 0x77, 0xd6, 0x26, 0xe1, 0x69, 0x14, 0x63, 0x55,
        0x21, 0x0c, 0x7d
    )

    private val Rcon = intArrayOf(
        0x8d, 0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80, 0x1b, 0x36,
        0x6c, 0xd8, 0xab, 0x4d, 0x9a, 0x2f, 0x5e, 0xbc, 0x63, 0xc6, 0x97,
        0x35, 0x6a, 0xd4, 0xb3, 0x7d, 0xfa, 0xef, 0xc5, 0x91, 0x39, 0x72,
        0xe4, 0xd3, 0xbd, 0x61, 0xc2, 0x9f, 0x25, 0x4a, 0x94, 0x33, 0x66,
        0xcc, 0x83, 0x1d, 0x3a, 0x74, 0xe8, 0xcb, 0x8d, 0x01, 0x02, 0x04,
        0x08, 0x10, 0x20, 0x40, 0x80, 0x1b, 0x36, 0x6c, 0xd8, 0xab, 0x4d,
        0x9a, 0x2f, 0x5e, 0xbc, 0x63, 0xc6, 0x97, 0x35, 0x6a, 0xd4, 0xb3,
        0x7d, 0xfa, 0xef, 0xc5, 0x91, 0x39, 0x72, 0xe4, 0xd3, 0xbd, 0x61,
        0xc2, 0x9f, 0x25, 0x4a, 0x94, 0x33, 0x66, 0xcc, 0x83, 0x1d, 0x3a,
        0x74, 0xe8, 0xcb, 0x8d, 0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40,
        0x80, 0x1b, 0x36, 0x6c, 0xd8, 0xab, 0x4d, 0x9a, 0x2f, 0x5e, 0xbc,
        0x63, 0xc6, 0x97, 0x35, 0x6a, 0xd4, 0xb3, 0x7d, 0xfa, 0xef, 0xc5,
        0x91, 0x39, 0x72, 0xe4, 0xd3, 0xbd, 0x61, 0xc2, 0x9f, 0x25, 0x4a,
        0x94, 0x33, 0x66, 0xcc, 0x83, 0x1d, 0x3a, 0x74, 0xe8, 0xcb, 0x8d,
        0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80, 0x1b, 0x36, 0x6c,
        0xd8, 0xab, 0x4d, 0x9a, 0x2f, 0x5e, 0xbc, 0x63, 0xc6, 0x97, 0x35,
        0x6a, 0xd4, 0xb3, 0x7d, 0xfa, 0xef, 0xc5, 0x91, 0x39, 0x72, 0xe4,
        0xd3, 0xbd, 0x61, 0xc2, 0x9f, 0x25, 0x4a, 0x94, 0x33, 0x66, 0xcc,
        0x83, 0x1d, 0x3a, 0x74, 0xe8, 0xcb, 0x8d, 0x01, 0x02, 0x04, 0x08,
        0x10, 0x20, 0x40, 0x80, 0x1b, 0x36, 0x6c, 0xd8, 0xab, 0x4d, 0x9a,
        0x2f, 0x5e, 0xbc, 0x63, 0xc6, 0x97, 0x35, 0x6a, 0xd4, 0xb3, 0x7d,
        0xfa, 0xef, 0xc5, 0x91, 0x39, 0x72, 0xe4, 0xd3, 0xbd, 0x61, 0xc2,
        0x9f, 0x25, 0x4a, 0x94, 0x33, 0x66, 0xcc, 0x83, 0x1d, 0x3a, 0x74,
        0xe8, 0xcb
    )

    private fun IntArray.core(iteration: Int): IntArray {
        val word = IntArray(size) { get((it + 1) % size) }
        for (i in 0 until 4) word[i] = sbox[word[i]]
        word[0] = word[0] xor Rcon[iteration]
        return word
    }

    private fun expandKey(key: IntArray, size: Int, expandedKeySize: Int): IntArray {
        var currentSize = 0
        var rconIteration = 1
        val expandedKey = IntArray(expandedKeySize)
        for (j in 0 until size) expandedKey[j] = key[j]
        currentSize += size

        while (currentSize < expandedKeySize) {
            var t = expandedKey.sliceArray(currentSize-4 until currentSize)
            if (currentSize % size == 0) {
                t = t.core(rconIteration)
                rconIteration++
            }
            for (m in 0 until 4) {
                expandedKey[currentSize] = expandedKey[currentSize - size] xor t[m]
                currentSize++
            }
        }

        return expandedKey
    }

    private fun addRoundKey(state: IntArray, roundKey: IntArray) {
        for (i in 0 until 16) state[i] = state[i] xor roundKey[i]
    }

    private fun createRoundKey(expandedKey: IntArray, roundKeyPointer: Int): IntArray {
        val roundKey = IntArray(16)
        for (i in 0 until 4)
            for (j in 0 until 4) roundKey[j*4+i] = expandedKey[roundKeyPointer + i*4 + j]
        return roundKey
    }

    private fun g(_a: Int, _b: Int): Int {
        var a = _a
        var b = _b
        var p = 0
        repeat(8) {
            if ((b and 1) != 0) p = p xor a
            val hi_bit_set = a and 0x80
            a = a shl 1
            a = a and 0xFF
            if (hi_bit_set != 0) a = a xor 0x1b
            b = b shr 1
        }
        return p
    }

    private fun subBytes(state: IntArray) {
        for (i in 0 until 16) state[i] = rsbox[state[i]]
    }

    private fun shiftRows(state: IntArray) {
        for (i in 0 until 4) shiftRow(state, i*4, i)
    }

    private fun shiftRow(state: IntArray, statePointer: Int, nbr: Int) {
        repeat(nbr) {
            val tmp = state.sliceArray(statePointer+3 until statePointer+4) + state.sliceArray(statePointer until statePointer+3)
            for (k in 0 until 4) state[statePointer+k] = tmp[k]
        }
    }

    private fun mixColumns(state: IntArray) {
        for (i in 0 until 4) {
            val column = intArrayOf(state[i],state[i+4],state[i+8],state[i+12])
            mixColumn(column)
            state[i] = column[0]
            state[i+4] = column[1]
            state[i+8] = column[2]
            state[i+12] = column[3]
        }
    }

    private fun mixColumn(column: IntArray) {
        val m = intArrayOf(14, 9, 13, 11)
        val t = column.copyOf()
        column[0] = g(t[0], m[0]) xor g(t[3], m[1]) xor g(t[2], m[2]) xor g(t[1], m[3])
        column[1] = g(t[1], m[0]) xor g(t[0], m[1]) xor g(t[3], m[2]) xor g(t[2], m[3])
        column[2] = g(t[2], m[0]) xor g(t[1], m[1]) xor g(t[0], m[2]) xor g(t[3], m[3])
        column[3] = g(t[3], m[0]) xor g(t[2], m[1]) xor g(t[1], m[2]) xor g(t[0], m[3])
    }

    fun aes_invRound(state: IntArray, roundKey: IntArray) {
        shiftRows(state)
        subBytes(state)
        addRoundKey(state, roundKey)
        mixColumns(state)
    }

    fun aes_invMain(state: IntArray, expandedKey: IntArray, nbrRounds: Int): IntArray {
        addRoundKey(state, createRoundKey(expandedKey, 16*nbrRounds))
        for (i in nbrRounds-1 downTo 1) aes_invRound(state, createRoundKey(expandedKey, 16*i))
        shiftRows(state)
        subBytes(state)
        addRoundKey(state, createRoundKey(expandedKey, 0))
        return state
    }

    fun decrypt(input: IntArray, key: IntArray, size: Int): IntArray {
        val output = IntArray(16)
        val nbrRounds = 10
        var block = IntArray(16)
        val expandedKeySize = 16 * (nbrRounds+1)
        for (i in 0 until 4) {
            for (j in 0 until 4) block[i+j*4] = input[i*4+j]
        }
        val expandedKey = expandKey(key, size, expandedKeySize)
        block = aes_invMain(block, expandedKey, nbrRounds)
        for (k in 0 until 4) {
            for (l in 0 until 4) output[k*4+l] = block[k+l*4]
        }
        return output
    }
}

private fun decrypt(cipherIn: IntArray): IntArray {
    val aes = AES()
    val key = intArrayOf(233,238,75,3,193,208,130,41,135,24,93,39,188,162,51,120)
    var iput = intArrayOf(24,143,175,219,224,248,126,240,252,40,16,213,179,227,71,5)
    val plaintext = IntArray(16)
    for (start in cipherIn.indices step 16) {
        val end = min(start+16, cipherIn.size)
        val ciphertext = cipherIn.sliceArray(start until end)
        aes.decrypt(ciphertext, key, 16).forEachIndexed { i, value ->
            plaintext[i] = value xor iput[i]
        }
        iput = ciphertext
    }
    return plaintext
}